- id: 243053d2-13c1-47f0-832d-6ef02ba95e1a
  name: Backup Sensitive Directories
  description: Create compressed backups of sensitive directories
  tactic: setup
  technique:
    attack_id: x
    name: x
  repeatable: False
  platforms:
    linux:
      sh:
        command: |
          mkdir -p /tmp/sensitive_file_backups;
          dir_path=$(echo "#{directory.sensitive.path}" | sed 's/\\\*/\*/g');
          directories=$(find $dir_path -maxdepth 0 -type d 2>/dev/null);
          output="";
          for directory in $directories;
            do if [ -z "$(ls -A $directory)" ]; then
              touch "${directory}/.bak";
            fi;
            randname=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 13);
            tar -czf /tmp/sensitive_file_backups/${randname}.tar.gz -C $directory .;
            output="${output}${directory}>${randname}.tar.gz\n";
          done;
          echo $output | sed '/^[[:space:]]*$/d'
        parsers:
          plugins.response.app.parsers.key_value:
            - source: directory.sensitive.path
              edge: has_backup
              target: directory.sensitive.backup
        cleanup: |
          rm -rf /tmp/sensitive_file_backups;
          dir_path=$(echo "#{directory.sensitive.path}" | sed 's/\\\*/\*/g');
          directories=$(find $dir_path -maxdepth 0 -type d 2>/dev/null);
          for directory in $directories;
            do rm -f "${directory}/.bak";
          done;
    darwin:
      sh:
        command: |
          mkdir -p /tmp/sensitive_file_backups;
          dir_path=$(echo "#{directory.sensitive.path}" | sed 's/\\\*/\*/g');
          directories=$(find $dir_path -maxdepth 0 -type d 2>/dev/null);
          output="";
          for directory in $directories;
            do if [ -z "$(ls -A $directory)" ]; then
              touch "${directory}/.bak";
            fi;
            randname=$(head /dev/urandom | LC_CTYPE=C tr -dc A-Za-z0-9 | head -c 13);
            tar -czf /tmp/sensitive_file_backups/${randname}.tar.gz -C $directory .;
            output="${output}${directory}>${randname}.tar.gz\n";
          done;
          echo $output | sed '/^[[:space:]]*$/d'
        parsers:
          plugins.response.app.parsers.key_value:
            - source: directory.sensitive.path
              edge: has_backup
              target: directory.sensitive.backup
        cleanup: |
          rm -rf /tmp/sensitive_file_backups;
          dir_path=$(echo "#{directory.sensitive.path}" | sed 's/\\\*/\*/g');
          directories=$(find $dir_path -maxdepth 0 -type d 2>/dev/null);
          for directory in $directories;
            do rm -f "${directory}/.bak";
          done;
    windows:
      psh:
        command: |
          New-Item -ItemType Directory -Force -Path C:\Users\Public\sensitive_file_backups | Out-Null;
          $output = '';
          Get-Item #{directory.sensitive.path} -EA silentlycontinue | Where-Object { $_ -is [System.IO.DirectoryInfo] } | foreach-object {
            if ((Get-ChildItem $_.FullName -Force | Measure-Object).count -eq 0) {
              echo '' > $($_.FullName + "\.bak");
            };
            $randname = -join (( 0x41..0x5A) + ( 0x61..0x7A) | Get-Random -Count 13 | % {[char]$_});
            Compress-Archive -Force -Path $($_.FullName + "\*") -DestinationPath $("C:\Users\Public\sensitive_file_backups\" + $randname + ".zip");
            $output = "$($output)$($_.FullName)>$($randname).zip`n";
          };
          $output;
        parsers:
          plugins.response.app.parsers.key_value:
            - source: directory.sensitive.path
              edge: has_backup
              target: directory.sensitive.backup
        cleanup: |
          Remove-Item -Recurse -Force C:\Users\Public\sensitive_file_backups -EA silentlycontinue;
          Get-Item #{directory.sensitive.path} -EA silentlycontinue | Where-Object { $_ -is [System.IO.DirectoryInfo] } | foreach-object {
            Remove-Item -Force "$($_.FullName)\.bak" -EA silentlycontinue;
          }
  requirements:
    - plugins.response.app.requirements.source_fact:
        - source: directory.sensitive.path
